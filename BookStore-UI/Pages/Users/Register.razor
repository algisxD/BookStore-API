@page "/Register"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager


<h3 class="card-title">Register now</h3>
@if (!response)
{
    <ErrorMessage Message="Something went wrong with the registration attempt" />
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)" />
        </div>
        <div>
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div>
            <label for="confirmpasssword">Confirm Password</label>
            <InputText Id="confirmpasssword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        &nbsp
        <button type="submit" class="btn btn-primary btn-block">Submit</button>

    </EditForm>
</div>


@code {
    private RegistrationModel Model = new RegistrationModel();
    private bool response = true;

    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);
        if (response)
        {
            _navManager.NavigateTo("/");
        }
    }
}
